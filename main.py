# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from imports import *

with open("data.json", "r") as file:
    data = json.load(file)

class MyMapWidget(QWebEngineView):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.setMinimumSize(810, 431)

    def update_map(self, location_name):
        # Construct the Google Maps URL with the provided location name
        map_url = f"https://www.google.com/maps?q={location_name.replace(' ', '+')}"
        self.load(QUrl(map_url))



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 600)
        MainWindow.setMinimumSize(QtCore.QSize(900, 600))
        MainWindow.setMaximumSize(QtCore.QSize(900, 600))
        MainWindow.setStyleSheet("background-color: rgb(113, 130, 170);\n"
"font: 75 italic 10pt \"Bahnschrift\";\n"
"color: rgb(255, 255, 255);")
        MainWindow.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 881, 561))
        self.tabWidget.setStyleSheet("color: rgb(0, 0, 0);")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.comboBox = QtWidgets.QComboBox(self.tab)
        self.comboBox.setGeometry(QtCore.QRect(20, 40, 261, 41))
        self.comboBox.setStyleSheet("color: rgb(0, 0, 0);")
        self.comboBox.setCurrentText("")
        self.comboBox.setObjectName("comboBox")
        self.groupBox = QtWidgets.QGroupBox(self.tab)
        self.groupBox.setGeometry(QtCore.QRect(20, 100, 391, 411))
        self.groupBox.setStyleSheet("background-color: rgb(79, 85, 122);\n"
"color: rgb(255, 255, 255);")
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 0, 0, 1, 1)
        self.official_name = QtWidgets.QLabel(self.groupBox)
        self.official_name.setText("")
        self.official_name.setObjectName("official_name")
        self.gridLayout_2.addWidget(self.official_name, 0, 1, 1, 2)
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setObjectName("label_5")
        self.gridLayout_2.addWidget(self.label_5, 1, 0, 1, 1)
        self.capital = QtWidgets.QLabel(self.groupBox)
        self.capital.setText("")
        self.capital.setObjectName("capital")
        self.gridLayout_2.addWidget(self.capital, 1, 1, 1, 2)
        self.label_6 = QtWidgets.QLabel(self.groupBox)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 2, 0, 1, 1)
        self.region = QtWidgets.QLabel(self.groupBox)
        self.region.setText("")
        self.region.setObjectName("region")
        self.gridLayout_2.addWidget(self.region, 2, 1, 1, 2)
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 3, 0, 1, 1)
        self.callingCode = QtWidgets.QLabel(self.groupBox)
        self.callingCode.setText("")
        self.callingCode.setObjectName("callingCode")
        self.gridLayout_2.addWidget(self.callingCode, 3, 1, 1, 2)
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_2.setGeometry(QtCore.QRect(440, 100, 421, 411))
        self.groupBox_2.setStyleSheet("background-color: rgb(79, 85, 122);\n"
"color: rgb(255, 255, 255);")
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout.setObjectName("gridLayout")
        self.label_7 = QtWidgets.QLabel(self.groupBox_2)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 0, 0, 1, 1)
        self.population = QtWidgets.QLabel(self.groupBox_2)
        self.population.setText("")
        self.population.setObjectName("population")
        self.gridLayout.addWidget(self.population, 0, 1, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.groupBox_2)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 1, 0, 1, 1)
        self.area = QtWidgets.QLabel(self.groupBox_2)
        self.area.setText("")
        self.area.setObjectName("area")
        self.gridLayout.addWidget(self.area, 1, 1, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.groupBox_2)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 2, 0, 1, 1)
        self.timezones = QtWidgets.QLabel(self.groupBox_2)
        self.timezones.setText("")
        self.timezones.setObjectName("timezones")
        self.gridLayout.addWidget(self.timezones, 2, 1, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.groupBox_2)
        self.label_10.setObjectName("label_10")
        self.gridLayout.addWidget(self.label_10, 3, 0, 1, 1)
        self.gini = QtWidgets.QLabel(self.groupBox_2)
        self.gini.setText("")
        self.gini.setObjectName("gini")
        self.gridLayout.addWidget(self.gini, 3, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(20, 10, 201, 16))
        self.label.setObjectName("label")
        self.img_label = QtWidgets.QLabel(self.tab)
        self.img_label.setGeometry(QtCore.QRect(650, 10, 191, 81))
        self.img_label.setStyleSheet("")
        self.img_label.setText("")
        self.img_label.setPixmap(QtGui.QPixmap(":/newPrefix/flags-img/af.png"))
        self.img_label.setScaledContents(True)
        self.img_label.setObjectName("img_label")
        self.pushButton = QtWidgets.QPushButton(self.tab)
        self.pushButton.setGeometry(QtCore.QRect(310, 40, 101, 41))
        self.pushButton.setObjectName("pushButton")
        self.tabWidget.addTab(self.tab, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.tab_3)
        self.plainTextEdit.setEnabled(True)
        self.plainTextEdit.setGeometry(QtCore.QRect(20, 90, 841, 421))
        self.plainTextEdit.setAutoFillBackground(False)
        self.plainTextEdit.setStyleSheet("background-color: rgb(241, 241, 241);\n"
"font: 16pt \"MS Shell Dlg 2\";")
        self.plainTextEdit.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.plainTextEdit.setReadOnly(True)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.label_3 = QtWidgets.QLabel(self.tab_3)
        self.label_3.setGeometry(QtCore.QRect(20, 20, 111, 51))
        self.label_3.setStyleSheet("font: italic 22pt \"Bahnschrift\";")
        self.label_3.setObjectName("label_3")
        self.label_country_name = QtWidgets.QLabel(self.tab_3)
        self.label_country_name.setGeometry(QtCore.QRect(160, 20, 561, 51))
        self.label_country_name.setStyleSheet("font: italic 22pt \"Bahnschrift\";")
        self.label_country_name.setText("")
        self.label_country_name.setObjectName("label_country_name")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_11 = QtWidgets.QLabel(self.tab_2)
        self.label_11.setGeometry(QtCore.QRect(10, 460, 361, 21))
        self.label_11.setObjectName("label_11")
        self.link = QtWidgets.QLabel(self.tab_2)
        self.link.setGeometry(QtCore.QRect(10, 490, 511, 31))
        self.link.setText("")
        self.link.setOpenExternalLinks(True)
        self.link.setTextInteractionFlags(QtCore.Qt.LinksAccessibleByMouse|QtCore.Qt.TextSelectableByMouse)
        self.link.setObjectName("link")
        self.map = QtWidgets.QWidget(self.tab_2)
        self.map.setGeometry(QtCore.QRect(10, 20, 851, 431))
        self.map.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.map.setObjectName("map")
        self.pushButton2 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton2.setGeometry(QtCore.QRect(712, 470, 121, 41))
        self.pushButton2.setObjectName("pushButton2")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Countries"))
        self.comboBox.setToolTip(_translate("MainWindow", "<html><head/><body><p>:)</p></body></html>"))
        self.groupBox.setTitle(_translate("MainWindow", "General information"))
        self.label_2.setText(_translate("MainWindow", "Official name:"))
        self.label_5.setText(_translate("MainWindow", "Capital:"))
        self.label_6.setText(_translate("MainWindow", "Continent"))
        self.label_4.setText(_translate("MainWindow", "Country Code:"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Detailed Informations"))
        self.label_7.setText(_translate("MainWindow", "Population (2010):"))
        self.label_8.setText(_translate("MainWindow", "Surface Area"))
        self.label_9.setText(_translate("MainWindow", "Timezone"))
        self.label_10.setText(_translate("MainWindow", "Gini Coeficient"))
        self.label.setText(_translate("MainWindow", "Please choose your country:"))
        self.pushButton.setText(_translate("MainWindow", "Search"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "General Infos"))
        self.plainTextEdit.setPlainText(_translate("MainWindow", "Afghanistan is in the path of important trade routes that connect southern and eastern Asia to Europe and the Middle East. Because of this, many empire builders have decided to rule over the area. Signs that these emperors were near Afghanistan still exist in many parts of the country.[26] Afghanistan is near what used to be the Silk Road, so it has many cultures. From up to 8,000 years ago, the peoples of Afghanistan helped develop (create) major world religions, traded and exchanged many products, and sometimes controlled politics and culture in Asia"))
        self.label_3.setText(_translate("MainWindow", "What is"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "History"))
        self.label_11.setText(_translate("MainWindow", "If you need more information about this country, visit:"))
        self.pushButton2.setText(_translate("MainWindow", "Refresh"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "More infos"))
        
        #fill comboBox with the list of name of countries
        for key, country in data.items():
            self.comboBox.addItem(country["name"], key)

        #searches for the disired country    
        self.pushButton.clicked.connect(self.clicked)
        
        #refreshes map result
        self.pushButton2.clicked.connect(self.refresh)
        
    def refresh(self):
        
        # Update the map with the country name in case of embed fail, laugh at this user
        self.map.update_map(data[self.result_key]["official_name"])
        
    def clicked(self):
        
        #Acessing the currently selected country name
        self.search_name = str(self.comboBox.currentText())

        #looking for country key to acess the data
        for key, value in data.items():
            if value["name"] == self.search_name:
                self.result_key = key
                break
            
        self.official_name.setText(str(data[self.result_key]["official_name"]))
        self.capital.setText(str(data[self.result_key]["capital"]))
        self.region.setText(str(data[self.result_key]["region"]))
        self.callingCode.setText(str(data[self.result_key]["callingCode"]))
        
        #formatting population so it's easier to read
        self.fpopulation = data[self.result_key]["population"]
        self.fpopulation = f"{self.fpopulation:,}"
        self.fpopulation = self.fpopulation.replace(",", " ")
        self.population.setText(str(self.fpopulation))
        
        #formatting area so it's easier to read
        self.farea = data[self.result_key]["area"]
        self.farea = f"{self.farea:,}"
        self.farea = self.farea.replace(",", " ")
        self.area.setText(str(self.farea) +" km²")
        
        self.timezones.setText(str(data[self.result_key]["timezones"]))
        self.gini.setText(str(data[self.result_key]["gini"]))
        
        #displays the link in tab 2
        self.link.setText(str(f"https://simple.wikipedia.org/wiki/{data[self.result_key]["name"]}"))
        
        #displays the image of the selected country when PushButton is clicked
        self.img_label.setPixmap(QPixmap(f"flags-img/{data[self.result_key]["alpha2Code"]}.png"))
        
        # Create an instance of MyMapWidget
        self.map = MyMapWidget(self.map)
        
        # Update the map with the country name
        self.map.update_map(data[self.result_key]["official_name"])
        
        #Put the history paragraph in the text area
        self.label_country_name.setText(f"{data[self.result_key]['name']}"+"?")
        self.plainTextEdit.setPlainText(self.country_name_scraper())
        
    def country_name_scraper(self):
        
        url = f'https://simple.wikipedia.org/wiki/{data[self.result_key]['name']}'
        # Send a GET request to the URL check if the request was successful (status code 200)
        if requests.get(url).status_code == 200:
            soup = BeautifulSoup(requests.get(url).text, 'html.parser')

            # Find the <h2> tag with the text 'History'
            history_heading = soup.find('span', id="History").parent
            
            if history_heading:
                # Get the next sibling, which is the first paragraph after the <h2> tag
                first_paragraph = history_heading.find_next_sibling('p')
                if first_paragraph:
                    print("Paragraph found")
                    string = first_paragraph.get_text()
                    pattern = re.compile(r'\[\d+\]')
                    result = re.sub(pattern, '', string)
                    self.pushButton.setText("Search")
                    return(result)
                else:
                    print("No paragraph found after the 'History' heading.")
                    return "No paragraph found after the 'History' heading."
            else:
                print("No 'History' heading found on the page.")
                return "No 'History' heading found on the page"
        else:
            print(f"Failed to retrieve the webpage. Status Code: {requests.get(url).status_code}")
            return f"Failed to retrieve the webpage. Status Code: {requests.get(url).status_code}"

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    
    # Initialize QtWebEngine
    from PyQt5.QtWebEngineWidgets import QWebEngineSettings
    QWebEngineSettings.globalSettings().setAttribute(QWebEngineSettings.PluginsEnabled, True)
    
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
